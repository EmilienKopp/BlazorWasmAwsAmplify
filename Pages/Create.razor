@page "/Create"
@inject NavigationManager NavManager

<h1 class="bg-info" text-white>Create a Customer</h1>

<h2 class="text-success p-2">@FormSubmitMessage</h2>

<EditForm Model="CustomerData" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name</label>
        <ValidationMessage For="@( () => CustomerData.Name)" />
        <InputText class="form-control" @bind-Value="CustomerData.Name" />
    </div>
    <div class="form-group">
        <label>Romaji</label>
        <ValidationMessage For="@( () => CustomerData.Romaji)" />
        <InputText class="form-control" @bind-Value="CustomerData.Romaji" />
    </div>
    <div class="form-group">
        <label>Phone</label>
        <ValidationMessage For="@( () => CustomerData.Phone)" />
        <InputText class="form-control" @bind-Value="CustomerData.Phone" />
    </div>
    <div class="form-group">
        <label>MembershipType</label>
        <ValidationMessage For="@( () => CustomerData.MembershipType)" />
        <InputText class="form-control" @bind-Value="CustomerData.MembershipType" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <ValidationMessage For="@( () => CustomerData.Email )" />
        <InputText class="form-control" @bind-Value="CustomerData.Email" />
    </div>
    <div class="form-group">
        <label>City</label>
        <ValidationMessage For="@( () => CustomerData.City )" />
        <InputText class="form-control" @bind-Value="CustomerData.City" />
    </div>
    <div class="form-group">
        <label>Address</label>
        <ValidationMessage For="@( () => CustomerData.Address )" />
        <InputText class="form-control" @bind-Value="CustomerData.Address" />
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">保存して一覧に戻る</button>
    </div>

</EditForm>

<!-- If the reservation isn't null, display it in a table -->
@if (ReceivedUser != null)
{
    <h3 class="text-warning p-2">更新した情報</h3>
    <table class="table table-sm table-striped table-bordered m-2">
        <thead>
            <tr>
                <th>Name</th>
                <th>MembershipType</th>
                <th>Email</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@ReceivedUser.Name</td>
                <td>@ReceivedUser.MembershipType</td>
                <td>@ReceivedUser.Email</td>
            </tr>
        </tbody>
    </table>
}



@code {

    public Customer CustomerData = new Customer();
    Customer ReceivedUser;

    public string FormSubmitMessage { get; set; } = "Customer Not Created";

    public async Task HandleValidSubmit()
    {
        ReceivedUser = new Customer();
        using (var httpClient = new HttpClient())
        {
            StringContent content = new StringContent(JsonConvert.SerializeObject(CustomerData), Encoding.UTF8, "application/json");
            using (var response = await httpClient.PostAsync("https://lw0051grod.execute-api.ap-northeast-1.amazonaws.com/prod/users", content))
            {
                Console.WriteLine(JsonConvert.DeserializeObject<Customer>(await content.ReadAsStringAsync()));
                string apiResponse = await response.Content.ReadAsStringAsync();
                ReceivedUser = JsonConvert.DeserializeObject<Customer>(apiResponse);
            }
        }
        FormSubmitMessage = "Customer Created";
        NavManager.NavigateTo("/Read");
    }

    public void HandleInvalidSubmit() => FormSubmitMessage = "Invalid Customer";
}
